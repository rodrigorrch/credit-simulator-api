continue
a.id
a
a = @loan_simulation_repository.create(simulation)
simulation.total_amount.to_decimal.round(2)
simulation.total_amount.to_decimal
simulation.total_amount
simulation.monthly_payment.to_decimal.round(2)
simulation.monthly_payment.to_decimal
simulation.monthly_payment
simulation.currency
simulation.interest_rate.to_decimal.to_f
simulation.interest_rate.to_decimal
simulation.interest_rate
simulation.installments
simulation.birth_date
simulation
simulation.amount.to_decimal
simulation.amount
simulation.id
simulation.class
simulation.id
simulation.as_json
simulation.to_json
simulation
continue
@monthly_payment = calc_monthly_payment.to_decimal.round(2)
 calc_monthly_payment.to_decimal.round(2)
monthly_payment
 calc_total_amount
continue
monthly_payment
calc_total_amount
calc_total_amount.round(2)
calc_monthly_payment.to_decimal.round(2)
continue
calc_total_amount
calc_total_amount.to_decimal
continue
calc_monthly_payment.to_decimal.roud(2)
calc_monthly_payment.to_decimal.roud(4)
calc_monthly_payment.to_decimal
calc_monthly_payment
continue
calc_monthly_payment
continue
calc_monthly_payment
continue
(value / BigDecimal('100')).to_f
(BigDecimal(value) / BigDecimal('100')).to_f
BigDecimal(value) / BigDecimal('100')
continue
BigDecimal(value) / BigDecimal('100')
r
numerador = pv * r.annual_percentage
r.to_f
r
numerador.to_f
numerador = pv * r
pv * r
pv.to_f
pv
continue
pmt
amount.currency
continue
attributes[:amount].to_f
attributes[:amount]
attributes[:id]
continue
attributes[:amount]
continue
attributes[:amount]
amount.to_decimal
amount
pmt
continue
entitie.total_amount.to_decimal
entitie.monthly_payment.to_decimal
entitie.monthly_payment
entitie.calc_monthly_payment
continue
simulation.monthly_payment.to_decimal
simulation.monthly_payment
simulation
continue
simulation.monthy_payment
simulation.installments
simulation.amount
simulation
simulation.monthly_payment
simulation.monthly_payment.to_decimal
simulation.currency
simulation.interest_rate.type
simulation.interest_rate.value
simulation.installments
simulation.birth_date
simulation.amount.to_decimal
simulation
continue
@loan_simulation_repository.create(simulation)
continue
@loan_simulation_repository.create(simulation)
continue
total_amount
continue
monthly_payment
continue
Domain::ValueObjects::InterestRate::Fixed.new(value: rate)
continue
Domain::ValueObjects::InterestRate::Fixed.new(value: rate)
continue
rate[:spread]
rate[:spread].present?
continue
attributes[:spread]
attributes[:interest_rate]
build_interest_rate(attributes[:interest_rate], attributes[:spread])
continue
ValueObjects::InterestRate.new(attributes[:interest_rate])
continue
@amount = ValueObjects::Money.new(attributes[:amount])
continue
amount.currency
@amount = ValueObjects::Money.new(attributes[:amount])
amount
amount.currency
monthly_payment
attributes[:currency]
attributes[:interest_rate]
attributes
continue
params[:amount]
params[:installments]
params[:birth_date]
params
continue
Domain::Services::InterestRateCalculator.new.calculate_for_age(params[:birth_date])
continue
interest_rate_calculator.calculate_for_age(params[:birth_date])
params[:birth_date]
interest_rate_calculator
continue
simulation = create_loan_simulation.execute(simulation_params)
continue
